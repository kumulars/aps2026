# Generated by Django 5.1.9 on 2025-08-11 18:35

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticsConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, help_text='Master on/off switch for analytics')),
                ('track_page_views', models.BooleanField(default=True)),
                ('track_searches', models.BooleanField(default=True)),
                ('track_errors', models.BooleanField(default=True)),
                ('track_downloads', models.BooleanField(default=True)),
                ('sampling_rate', models.FloatField(default=1.0, help_text='Sampling rate for high-traffic pages (0.0-1.0)')),
                ('max_events_per_minute', models.IntegerField(default=1000, help_text='Rate limiting for event tracking')),
                ('raw_event_retention_days', models.IntegerField(default=30)),
                ('daily_summary_retention_days', models.IntegerField(default=365)),
                ('debug_log_retention_days', models.IntegerField(default=7)),
                ('bot_user_agents', models.JSONField(default=list, help_text='List of user agent patterns to identify bots')),
                ('report_recipients', models.JSONField(default=list, help_text='Email addresses for weekly reports')),
                ('send_weekly_reports', models.BooleanField(default=True)),
                ('report_day', models.IntegerField(default=1, help_text='Day of week to send reports (1=Monday, 7=Sunday)')),
                ('debug_mode', models.BooleanField(default=False, help_text='Enable verbose logging')),
                ('test_mode', models.BooleanField(default=False, help_text='Mark events as test data')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Analytics Configuration',
                'verbose_name_plural': 'Analytics Configuration',
            },
        ),
        migrations.CreateModel(
            name='DailySummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, unique=True)),
                ('total_page_views', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('unique_visitors', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_sessions', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('avg_session_duration', models.IntegerField(default=0, help_text='Average session duration in seconds')),
                ('bounce_rate', models.FloatField(default=0.0, help_text='Percentage of single-page sessions')),
                ('top_pages', models.JSONField(default=list, help_text='Top 10 pages with view counts')),
                ('top_searches', models.JSONField(default=list, help_text='Top 20 search queries')),
                ('new_users', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('returning_users', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('error_count', models.IntegerField(default=0)),
                ('error_details', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('processing_errors', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Daily summaries',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsDebugLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], max_length=10)),
                ('component', models.CharField(help_text='Component that generated the log', max_length=100)),
                ('message', models.TextField()),
                ('extra_data', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['-timestamp', 'level'], name='analytics_a_timesta_caa8ee_idx')],
            },
        ),
        migrations.CreateModel(
            name='WeeklyReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start', models.DateField(db_index=True)),
                ('week_end', models.DateField()),
                ('report_data', models.JSONField(default=dict)),
                ('sent_to', models.JSONField(default=list, help_text='List of email addresses')),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('is_generated', models.BooleanField(default=False)),
                ('is_sent', models.BooleanField(default=False)),
                ('generation_errors', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-week_start'],
                'unique_together': {('week_start', 'week_end')},
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('page_view', 'Page View'), ('search', 'Search'), ('click', 'Click'), ('form_submit', 'Form Submit'), ('download', 'Download'), ('error', 'Error'), ('api_call', 'API Call'), ('custom', 'Custom Event')], db_index=True, max_length=50)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('session_id', models.CharField(blank=True, db_index=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('page_url', models.URLField(blank=True, max_length=500)),
                ('referrer_url', models.URLField(blank=True, max_length=500)),
                ('event_data', models.JSONField(blank=True, default=dict)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed'), ('retry', 'Retry')], db_index=True, default='pending', max_length=20)),
                ('error_count', models.IntegerField(default=0)),
                ('last_error', models.TextField(blank=True)),
                ('page_load_time', models.IntegerField(blank=True, help_text='Page load time in milliseconds', null=True)),
                ('is_bot', models.BooleanField(db_index=True, default=False)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['-timestamp', 'event_type'], name='analytics_a_timesta_308c0e_idx'), models.Index(fields=['session_id', '-timestamp'], name='analytics_a_session_720940_idx'), models.Index(fields=['user', '-timestamp'], name='analytics_a_user_id_03d15c_idx')],
            },
        ),
    ]
